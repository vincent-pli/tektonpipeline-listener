/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vincent-pli/tektonpipeline-listener/pkg/apis/samplecontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ListenerTemplateLister helps list ListenerTemplates.
type ListenerTemplateLister interface {
	// List lists all ListenerTemplates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ListenerTemplate, err error)
	// ListenerTemplates returns an object that can list and get ListenerTemplates.
	ListenerTemplates(namespace string) ListenerTemplateNamespaceLister
	ListenerTemplateListerExpansion
}

// listenerTemplateLister implements the ListenerTemplateLister interface.
type listenerTemplateLister struct {
	indexer cache.Indexer
}

// NewListenerTemplateLister returns a new ListenerTemplateLister.
func NewListenerTemplateLister(indexer cache.Indexer) ListenerTemplateLister {
	return &listenerTemplateLister{indexer: indexer}
}

// List lists all ListenerTemplates in the indexer.
func (s *listenerTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.ListenerTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ListenerTemplate))
	})
	return ret, err
}

// ListenerTemplates returns an object that can list and get ListenerTemplates.
func (s *listenerTemplateLister) ListenerTemplates(namespace string) ListenerTemplateNamespaceLister {
	return listenerTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ListenerTemplateNamespaceLister helps list and get ListenerTemplates.
type ListenerTemplateNamespaceLister interface {
	// List lists all ListenerTemplates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ListenerTemplate, err error)
	// Get retrieves the ListenerTemplate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ListenerTemplate, error)
	ListenerTemplateNamespaceListerExpansion
}

// listenerTemplateNamespaceLister implements the ListenerTemplateNamespaceLister
// interface.
type listenerTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ListenerTemplates in the indexer for a given namespace.
func (s listenerTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ListenerTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ListenerTemplate))
	})
	return ret, err
}

// Get retrieves the ListenerTemplate from the indexer for a given namespace and name.
func (s listenerTemplateNamespaceLister) Get(name string) (*v1alpha1.ListenerTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("listenertemplate"), name)
	}
	return obj.(*v1alpha1.ListenerTemplate), nil
}
